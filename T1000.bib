Automatically generated by Mendeley Desktop 1.19.2
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@inproceedings{Kuon07,
abstract = {This paper presents experimental measurements of the differences between a 90-nm CMOS field programmable gate array (FPGA) and 90-nm CMOS standard-cell application-specific integrated circuits (ASICs) in terms of logic density, circuit speed, and power consumption for core logic. We are motivated to make these measurements to enable system designers to make better informed choices between these two media and to give insight to FPGA makers on the deficiencies to attack and, thereby, improve FPGAs. We describe the methodology by which the measurements were obtained and show that, for circuits containing only look-up table-based logic and flip-flops, the ratio of silicon area required to implement them in FPGAs and ASICs is on average 35. Modern FPGAs also contain "hard" blocks such as multiplier/accumulators and block memories. We find that these blocks reduce this average area gap significantly to as little as 18 for our benchmarks, and we estimate that extensive use of these hard blocks could potentially lower the gap to below five. The ratio of critical-path delay, from FPGA to ASIC, is roughly three to four with less influence from block memory and hard multipliers. The dynamic power consumption ratio is approximately 14 times and, with hard blocks, this gap generally becomes smaller},
author = {Kuon, Ian and Rose, Jonathan},
booktitle = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
doi = {10.1109/TCAD.2006.884574},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Kuon, Rose - 2007 - Measuring the gap between FPGAs and ASICs(2).pdf:pdf},
isbn = {1595932925},
issn = {02780070},
keywords = {Application-specific integrated circuits (ASIC),Area comparison,Delay comparison,Field programmable gate array (FPGA),Power comparison},
month = {feb},
number = {2},
pages = {203--215},
title = {{Measuring the gap between FPGAs and ASICs}},
url = {http://ieeexplore.ieee.org/document/4068926/},
volume = {26},
year = {2007}
}
@article{Spin08,
abstract = {The tools and processes we use to transform our system's source code into an application that we can deploy or ship have always been important, but nowadays they can mean the difference between success and failure. Software building's golden rule is that you should automate all build tasks. The most popular tool options for doing this are the facilities that your integrated development environment (IDE) provides, the various implementations of Make, and Apache Ant and Maven. Using an IDE can be problematic. Ant and Maven provide a portable solution for Java developers, while Make is more flexible and transparent. You can optimize the build process by appropriate dependency tracking and parallelization. Once an automated build process is in place, you can use it as a basis for continuous builds. {\textcopyright} 2008 IEEE.},
author = {Spinellis, Diomidis},
doi = {10.1109/MS.2008.74},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Spinellis - 2008 - Software builders.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
keywords = {Ant,Automation,Build process,Computer bugs,Continuous integration,Dependency tracking,Documentation,Java,Make,Marine vehicles,Maven,Process control,Software,Tinderbox},
month = {may},
number = {3},
pages = {22--23},
pmid = {21791185},
title = {{Software builders}},
url = {http://ieeexplore.ieee.org/document/4497759/},
volume = {25},
year = {2008}
}
@article{Schr35,
author = {Schr{\"{o}}dinger, E.},
doi = {10.1007/BF01491891},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Schroedinger - 1935 - Die gegenwaertige Situation in der Quantenmechanik(2).pdf:pdf},
journal = {Die Naturwissenschaften},
month = {nov},
number = {48},
pages = {807--812},
publisher = {Springer-Verlag},
title = {{Die gegenw{\"{a}}rtige Situation in der Quantenmechanik. (1. Teil)}},
url = {http://link.springer.com/10.1007/BF01491891},
volume = {23},
year = {1935}
}
@article{Serr04,
abstract = {Everyone uses build tools. We have Make, GNU Make, Nmake, Jam, and many others. But Apache's Ant is different from typical build tools. Instead of using inherently evil shell-based commands, it's based on Java classes. Its use of XML for configuration files and architecture enables Ant's big advantages: simplicity, portability, and power. In this paper we have summarized Ant's most important features and a wealth of recommended practices.},
author = {Serrano, Nicol{\'{a}}s and Ciordia, Ismael},
doi = {10.1109/MS.2004.33},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Serrano, Ciordia - 2004 - Ant Automating the process of building applications.pdf:pdf},
issn = {07407459},
journal = {IEEE Software},
number = {6},
pages = {89--91},
title = {{Ant: Automating the process of building applications}},
volume = {21},
year = {2004}
}
@inproceedings{Pavi17,
annote = {System Verilog over VHDL},
author = {Pavithran, T M and Bhakthavatchalu, Ramesh},
booktitle = {2017 International Conference on Technological Advancements in Power and Energy ( TAP Energy)},
doi = {10.1109/TAPENERGY.2017.8397323},
file = {:Users/hegele/Dropbox/Study/T1000/lit/08397323.pdf:pdf},
isbn = {978-1-5386-4021-0},
month = {dec},
pages = {1--5},
publisher = {IEEE},
title = {{UVM based testbench architecture for logic sub-system verification}},
url = {https://ieeexplore.ieee.org/document/8397323/},
year = {2017}
}
@article{Cha13,
abstract = {Quantum Algorithms have long captured the imagination of computer scientists and physicists primarily because of the speed up achieved by them over their classical counterparts using principles of quantum mechanics. Entanglement is believed to be the primary phenomena behind this speed up. However their precise role in quantum algorithms is yet unclear. In this article, we explore the nature of entanglement in the Grover's search algorithm. This algorithm enables searching of elements from an unstructured database quadratically faster than the best known classical algorithm. Geometric measure of entanglement has been used to quantify and analyse entanglement across iterations of the algorithm. We reveal how the entanglement varies with increase in the number of qubits and also with the number of marked or solution states. Numerically, it is seen that the behaviour of the maximum value of entanglement is monotonous with the number of qubits. Also, for a given value of the number of qubits, a change in the marked states alters the amount of entanglement. The amount of entanglement in the final state of the algorithm has been shown to depend solely on the nature of the marked states. Explicit analytical expressions are given showing the variation of entanglement with the number of iterations and the global maximum value of entanglement attained across all iterations of the algorithm.},
archivePrefix = {arXiv},
arxivId = {1305.4454},
author = {Chakraborty, Shantanav and Banerjee, Subhashish and Adhikari, Satyabrata and Kumar, Atul},
eprint = {1305.4454},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Chakraborty et al. - 2013 - Entanglement in the Grover's Search Algorithm.pdf:pdf},
month = {may},
pages = {6},
title = {{Entanglement in the Grover's Search Algorithm}},
url = {http://arxiv.org/abs/1305.4454},
year = {2013}
}
@article{Gong14,
author = {Gong, Lingkan and Diessel, Oliver},
doi = {10.1145/2560042},
file = {:Users/hegele/Dropbox/Study/T1000/lit/tecs14gong.pdf:pdf},
isbn = {978-3-319-06837-4},
issn = {1539-9087},
journal = {ACM Trans. Embed. Comput. Syst.},
keywords = {FPGA,dynamically reconfigurable systems,verification},
number = {4},
pages = {97:1----97:23},
title = {{Simulation-based Functional Verification of Dynamically Reconfigurable Systems}},
url = {http://doi.acm.org/10.1145/2560042},
volume = {13},
year = {2014}
}
@article{Rie98,
abstract = {Richard Feynman's observation that certain quantum mechanical effects cannot be simulated efficiently on a computer led to speculation that computation in general could be done more efficiently if it used these quantum effects. This speculation proved justified when Peter Shor described a polynomial time quantum algorithm for factoring integers. In quantum systems, the computational space increases exponentially with the size of the system which enables exponential parallelism. This parallelism could lead to exponentially faster quantum algorithms than possible classically. The catch is that accessing the results, which requires measurement, proves tricky and requires new non-traditional programming techniques. The aim of this paper is to guide computer scientists through the barriers that separate quantum computing from conventional computing. We introduce basic principles of quantum mechanics to explain where the power of quantum computers comes from and why it is difficult to harness. We describe quantum cryptography, teleportation, and dense coding. Various approaches to exploiting the power of quantum parallelism are explained. We conclude with a discussion of quantum error correction.},
archivePrefix = {arXiv},
arxivId = {arXiv:quant-ph/9809016v2},
author = {Rieffel, Eleanor and Polak, Wolfgang},
doi = {10.1145/367701.367709},
eprint = {9809016v2},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Rieffel, Polak - 1998 - An Introduction to Quantum Computing for Non-Physicists.pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
keywords = {complexity,parallelism,quantum computing},
month = {sep},
number = {3},
pages = {300--335},
primaryClass = {arXiv:quant-ph},
publisher = {ACM},
title = {{An introduction to quantum computing for non-physicists}},
url = {http://portal.acm.org/citation.cfm?doid=367701.367709},
volume = {32},
year = {2000}
}
@article{Cai02,
abstract = {Proper testing of transceivers requires the ability not only to$\backslash$nmeasure generated jitter but also to inject in-band as well as$\backslash$nout-of-band jitter for an appropriate receiver tolerance test. The$\backslash$narticle introduces a low-cost method to extend jitter testing to$\backslash$nconventional external loop-back testing (looping the transmitted signal$\backslash$nback to its own receiver) or golden device testing (using a known good$\backslash$ndevice to test its link partner). The technique introduced is$\backslash$nindependent of test platforms},
author = {Cai, Yi and Laquai, Bernd and Luehman, Kent},
doi = {10.1109/54.980054},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Cai, Laquai, Luehman - 2002 - Jitter testing for gigabit serial communication transceivers(2).pdf:pdf},
issn = {07407475},
journal = {IEEE Design and Test of Computers},
number = {1},
pages = {66--74},
title = {{Jitter testing for gigabit serial communication transceivers}},
url = {http://ieeexplore.ieee.org/document/980054/},
volume = {19},
year = {2002}
}
@misc{Xi18,
author = {{Xilinx Inc.}},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Xilinx - 2018 - Vivado Design Suite User Guide Logic Simulation.pdf:pdf},
keywords = {RTL Synthesis,Synthesis,Synthesize Desig,Vivado},
pages = {1--120},
title = {{Vivado Design Suite User Guide: Logic Simulation}},
url = {https://www.xilinx.com/support/documentation-navigation/design-hubs/dh0010-vivado-simulation-hub.html},
urldate = {2018-08-21},
volume = {2},
year = {2018}
}
@article{Meter06,
abstract = {In this article we present a classification scheme for quantum computing technologies that is based on the characteristics most relevant to computer systems architecture. The engineering trade-offs of execution speed, decoherence of the quantum states, and size of systems are described. Concurrency, storage capacity, and interconnection network topology influence algorithmic efficiency, while quantum error correction and necessary quantum state measurement are the ultimate drivers of logical clock speed. We discuss several proposed technologies. Finally, we use our taxonomy to explore architectural implications for common arithmetic circuits, examine the implementation of quantum error correction, and discuss cluster-state quantum computation.},
archivePrefix = {arXiv},
arxivId = {0906.2686},
author = {Meter, Rodney Van and Oskin, Mark},
doi = {10.1145/1126257.1126259},
eprint = {0906.2686},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Meter, Oskin - 2006 - Architectural implications of quantum computing technologies.pdf:pdf},
isbn = {1550-4832},
issn = {15504832},
journal = {ACM Journal on Emerging Technologies in Computing Systems},
keywords = {Quantum computing,quantum computer architecture},
month = {jan},
number = {1},
pages = {31--63},
publisher = {ACM},
title = {{Architectural implications of quantum computing technologies}},
url = {http://portal.acm.org/citation.cfm?doid=1126257.1126259},
volume = {2},
year = {2006}
}
@misc{Cad11,
abstract = {Multi-language simulation for low-power, metric-driven, mixed-signal},
author = {Cadence},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Cadence Design Systems - 2011 - Incisive Enterprise Simulator.pdf:pdf},
pages = {1--7},
title = {{Incisive Enterprise Simulator}},
url = {https://www.cadence.com/content/cadence-www/global/en{\_}US/home/tools/system-design-and-verification/simulation-and-testbench-verification/incisive-enterprise-simulator.html},
urldate = {2018-08-11},
year = {2011}
}
@article{Emily18,
author = {Emily, Conover},
file = {:Users/hegele/Desktop/T1000/lit/Google moves toward quantum supremacy with 72-qubit computer | Science News.pdf:pdf},
journal = {Science News},
number = {6},
pages = {2--3},
title = {{Google moves toward quantum supremacy with 72-qubit computer}},
url = {https://www.sciencenews.org/article/google-moves-toward-quantum-supremacy-72-qubit-computer},
volume = {193},
year = {2018}
}
@article{Hae08,
author = {H{\"{a}}hne, Ludwig},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/H{\"{a}}hne - 2008 - Empirical Comparison of SCons and GNU Make(2).pdf:pdf},
journal = {Arbeit},
title = {{Empirical Comparison of SCons and GNU Make}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.565.5512{\&}rep=rep1{\&}type=pdf},
year = {2008}
}
@article{Kas06,
address = {New York, New York, USA},
author = {Kasivajhula, Siddhartha},
doi = {10.1145/1185448.1185504},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Kasivajhula - 2006 - Quantum Computing A Survey.pdf:pdf},
isbn = {1595933158},
journal = {Proceedings of the 44th annual southeast regional conference on - ACM-SE 44},
keywords = {de-,entanglement,epr,nmr,quantum algo-,quantum computing,quantum logic,quantum parallelism,qubit,rithms},
pages = {249--253},
publisher = {ACM Press},
title = {{Quantum Computing : A Survey}},
url = {http://portal.acm.org/citation.cfm?doid=1185448.1185504},
year = {2006}
}
@article{Goldt95,
author = {Goldt, Sven and van der Meer, S},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Goldt, Meer - 1995 - The Linux Programmer's Guide.pdf:pdf},
journal = {{\ldots} /Programmers-Guide/Llpg- {\ldots}},
number = {March},
title = {{The Linux Programmer's Guide}},
url = {http://box.cs.istu.ru/public/docs/other/{\_}Unsorted/new/books.pdox.net/Computers/The Linux Programmer's Guide.pdf http://www.control.auc.dk/{~}klbe00/files/Linux{\_}Programmers{\_}Guide.pdf},
year = {1995}
}
@misc{Cad18,
author = {Cadence},
file = {:Users/hegele/Dropbox/Study/T1000/lit/IncElab.pdf:pdf},
title = {{Multi-Snapshot Incremental Elaboration 18.03}},
url = {https://support.cadence.com/apex/ArticleAttachmentPortal?id=a1O0V000007MkHQUA0},
urldate = {2018-08-25},
year = {2018}
}
@misc{Make16,
author = {{Free Software Foundation}},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Free Software Foundation - 2016 - GNU Make Manual.pdf:pdf},
title = {{GNU Make Manual}},
url = {https://www.gnu.org/software/make/manual/},
urldate = {2018-08-21},
year = {2016}
}
@inproceedings{Fine03,
abstract = {Functional verification is widely acknowledged as the bottleneck in the hardware design cycle. This paper addresses one of the main challenges of simulation based verification (or dynamic veri- fication), by providing a new approach for Coverage Directed Test Generation (CDG). This approach is based on Bayesian networks and computer learning techniques. It provides an efficient way for closing a feedback loop from the coverage domain back to a gener- ator that produces new stimuli to the tested design. In this paper, we show how to apply Bayesian networks to the CDG problem. Ap- plying Bayesian networks to the CDG framework has been tested in several experiments, exhibiting encouraging results and indicating that the suggested approach can be used to achieve CDG goals.},
address = {New York, New York, USA},
author = {Fine, Shai and Ziv, Avi},
booktitle = {Proceedings of the 40th Annual Design Automation Conference},
doi = {10.1145/775832.775907},
file = {:Users/hegele/Library/Application Support/Mendeley Desktop/Downloaded/Fine, Ziv - 2003 - Coverage directed test generation for functional verification using bayesian networks.pdf:pdf},
isbn = {1-58113-688-9},
keywords = {bayesian networks,coverage analysis,functional verification},
pages = {286--291},
publisher = {ACM Press},
title = {{Coverage Directed Test Generation for Functional Verification Using Bayesian Networks}},
url = {http://portal.acm.org/citation.cfm?doid=775832.775907 http://doi.acm.org/10.1145/775832.775907},
year = {2003}
}
